Although presented much like a traditional piece of graphic design software, Auto-Illustrator expresses a vast new way of treating codeas a creative extension of the self. The routines of Auto-Illustrator have been imbued with coded implementations of the author/artist’s creative decision-making process. In effect, this results in a deferred artistic activity, away from the original author, and as it is a computer application, in the hands of the person executing it.This brings about many questions regarding authorship and authenticity of digital artworks. It poses new possibilities for the valuation of mechanically reproduced artworks, and offers the possibility that programming (a creative act above anything else) becomes more than just a method of production (i.e., a craft)—thus rendering the author as code. This also opens us to the possibility of a real-world implementation of cyborgism. When you run Auto-Illustrator, you interact with me, the author of the code. Your final products (despite thinking they are created by you) will actually have been produced in collaboration with the me.Also presented as a parody of Adobe Illustrator, it mimics certain interface elements in an attempt to highlight the growing inadequacies of modern software. Professional software development is now about making software for the masses, and not for the professionals. The latest incarnation of Adobe Photoshop typifies this move away from focused professionalism to extreme popularist automation; Photoshop will now render all your web page buttons for you. Hopefully, within a few years, all web pages will conform to Adobe’s graphic design specifications!As an extreme reaction against this, Auto-Illustrator deliberately forces the user to experience a slightly jarring and dysfunctional approach to graphic design. Every time you ask it to draw an oval, it tries to draw a psychotic face. It’ll never draw the same psychotic face twice, mind you.Process over Product?Auto-Illustrator features a great deal of tools and utilities that allow the user to explore different ways of generating artwork. As well as allowing traditional visual design skills, users can automate their own behaviours, and reiterate them on their own artwork, or even on others’. The menus of fitters, transformations and plug-ins reveal that it is possible to codify graphic design skills as code. On a practical level, this makes generating certain visual designs easy (through automation), and yet on a philosophical level, we start to question where a graphic designer’s skills may lie. Would it be possible to render yourself purely as code, and then sell your skills as applications?